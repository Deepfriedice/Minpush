ignored
	' '
	\n
	\r
	\t

state
	{						start state label
	:						start / end state body
	$						state restart point
	?						start conditional state switch
	;						end conditional state switch
	}						end state definition

comments
	(						start comment
	)						end comment

literals
	`						character
	d						start decimal
	D						end decimal
	h						start hexadecimal
	H						end hexadecimal

stack manipulation
	t	(x --)				trim (drop)
	c	(x -- x x)			copy (dup)
	s	(x y -- y x)		swap
	r	(x y z -- y z x)	rotate
	R	(x y z -- z x y)	reverse rotate

arithmetic operations
	~	(x -- -x)			arithmetic negate
	+	(x y -- x+y)		addition
	-	(x y -- x-y)		subtraction
	*	(x y -- x*y)		multiplication
	/	(x y -- x/y)		division
	%	(x y -- x%y)		modulo

comparison operations
	=	(x y -- x=y)		equality
	<	(x y -- x<y)		less than
	>	(x y -- x>y)		greater than

bitwise / logical operations
	!	(x -- !x)			bitwise not
	&	(x y -- x&y)		bitwise and
	|	(x y -- x|y)		bitwise or

registers
	w x y z		(-- v)		get from register
	W X Y Z		(v --)		set to register

array literals
	'						start string
	"						end string
	[						start byte string
	]						end byte string

array manipulation
	L	(-- v)				get array length
	S	(n --)				resize array
	C	(i n --)			copy byte range
	I	(i n --)			insert byte range
	K	(i n --)			delete byte range

stack-array transfer
	o	 					byte
	E	 					big endian
	e	 					little endian
	p	(i -- v)			peek / read from array at offset
	P	(v i --)			poke / write to array at offset
	A	(v --)				append to array

io
	i	(-- v t)			read value	(returns byte, EOF?)
	.	(v --)				write value
	_	(i n --)			write bytes
